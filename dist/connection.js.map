{"version":3,"sources":["../src/connection.js"],"names":["debug","Connection","socket","req","logger","requests","url","ip","connection","remoteAddress","headers","id","message","protocol","on","msg","onMessage","err","messageType","messageId","commandNameOrPayload","commandPayload","errorDetails","JSON","parse","Error","CommandModel","commandRequest","responseData","responseObj","sendError","onRequest","createResponse","sendMessage","responseCallback","rejectCallback","command","error","self","commandValues","resolve","reject","messageToSend","onResponse","onRejectResponse","commandName","getCommandName","code","details","readyState","OPEN","send","setTimeout","payload","response","reason","request"],"mappings":"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","file":"connection.js","sourcesContent":["import uuid from 'uuid/v4';\nimport Websocket from 'ws';\nimport debugFn from 'debug';\nimport commands from './commands';\nimport {\n  DEBUG_LIBNAME,\n  CALL_MESSAGE,\n  CALLRESULT_MESSAGE,\n  CALLERROR_MESSAGE,\n  SOCKET_TIMEOUT\n} from './constants';\nimport { getObjectValues } from './helpers';\nimport OCPPError, {\n  ERROR_FORMATIONVIOLATION,\n  ERROR_INTERNALERROR\n} from './ocppError';\n\nconst debug = debugFn(DEBUG_LIBNAME);\n\nexport\nclass Connection {\n  constructor (socket, req = null, logger = null) {\n    this.socket = socket;\n    this.req = req;\n    this.requests = {};\n    this.logger = logger;\n\n    if (req) {\n      this.url = req && req.url;\n      const ip = req && ((req.connection && req.connection.remoteAddress) || req.headers[ 'x-forwarded-for' ]);\n\n      if (this.logger) {\n        this.logger.debug({ id: this.url, message: `New connection from \"${ip}\", protocol \"${socket.protocol}\", url \"${this.url}\"` });\n      } else {\n        debug(`New connection from \"${ip}\", protocol \"${socket.protocol}\", url \"${this.url}\"`);\n      }\n    } else {\n      this.url = 'SERVER';\n      debug(`New connection to server`);\n    }\n\n    socket.on('message', (msg) => this.onMessage(msg));\n\n    socket.on('error', (err) => {\n      debug(err);\n    });\n  }\n\n  async onMessage (message) {\n    let messageType, messageId, commandNameOrPayload, commandPayload, errorDetails;\n\n    try {\n      [messageType, messageId, commandNameOrPayload, commandPayload, errorDetails] = JSON.parse(message);\n    } catch (err) {\n      throw new Error(`Failed to parse message: \"${message}\", ${err.message}`);\n    }\n\n    switch (messageType) {\n      case CALL_MESSAGE:\n        // request\n        if (this.logger) {\n          this.logger.debug(`>> ${this.url}: ${message}`);\n        } else {\n          debug(`>> ${this.url}: ${message}`);\n        }\n\n        const CommandModel = commands[commandNameOrPayload];\n        if (!CommandModel) {\n          throw new Error(`Unknown command ${commandNameOrPayload}`);\n        }\n        let commandRequest, responseData, responseObj;\n        try {\n          commandRequest = new CommandModel(commandPayload);\n        } catch (err) {\n          // send error if payload didn't pass the validation\n          return await this.sendError(messageId, new OCPPError(ERROR_FORMATIONVIOLATION, err.message));\n        }\n\n        try {\n          responseData = await this.onRequest(commandRequest);\n          responseObj = commandRequest.createResponse(responseData);\n        } catch (err) {\n          return await this.sendError(messageId, err);\n        }\n\n        try {\n          await this.sendMessage(messageId, responseObj, CALLRESULT_MESSAGE);\n        } catch (err) {\n          await this.sendError(messageId, err);\n        }\n        break;\n      case CALLRESULT_MESSAGE:\n        // response\n        if (this.logger) {\n          this.logger.debug(`>> ${this.url}: ${message}`);\n        } else {\n          debug(`>> ${this.url}: ${message}`);\n        }\n\n        const [responseCallback] = this.requests[messageId];\n        if (!responseCallback) {\n          throw new Error(`Response for unknown message ${messageId}`);\n        }\n        delete this.requests[messageId];\n\n        responseCallback(commandNameOrPayload);\n        break;\n      case CALLERROR_MESSAGE:\n        // error response\n        if (this.logger) {\n          this.logger.debug(`>> ${this.url}: ${message}`);\n        } else {\n          debug(`>> ${this.url}: ${message}`);\n        }\n\n        if (!this.requests[messageId]) {\n          throw new Error(`Response for unknown message ${messageId}`);\n        }\n        const [, rejectCallback] = this.requests[messageId];\n        delete this.requests[messageId];\n\n        rejectCallback(new OCPPError(commandNameOrPayload, commandPayload, errorDetails));\n        break;\n      default:\n        throw new Error(`Wrong message type ${messageType}`);\n    }\n  }\n\n  send (command, messageType = CALL_MESSAGE) {\n    return this.sendMessage(uuid(), command, messageType);\n  }\n\n  sendError (messageId, err) {\n    if (this.logger) {\n      this.logger.debug(`Error: ${err.message}`);\n    } else {\n      debug(`Error: ${err.message}`);\n    }\n\n    const error = err instanceof OCPPError ? err : new OCPPError(ERROR_INTERNALERROR, err.message);\n\n    return this.sendMessage(messageId, error, CALLERROR_MESSAGE);\n  }\n\n  sendMessage (messageId, command, messageType = CALLRESULT_MESSAGE) {\n    const socket = this.socket;\n    const self = this;\n    const commandValues = getObjectValues(command);\n\n    return new Promise((resolve, reject) => {\n      let messageToSend;\n\n      switch (messageType) {\n        case CALL_MESSAGE:\n          this.requests[messageId] = [onResponse, onRejectResponse];\n          const commandName = command.getCommandName();\n\n          messageToSend = JSON.stringify([messageType, messageId, commandName, commandValues]);\n          break;\n        case CALLRESULT_MESSAGE:\n          messageToSend = JSON.stringify([messageType, messageId, commandValues]);\n          break;\n        case CALLERROR_MESSAGE:\n          const { code, message, details } = command;\n          messageToSend = JSON.stringify([messageType, messageId, code, message, details]);\n          break;\n      }\n\n      if (this.logger) {\n        this.logger.debug(`<< ${messageToSend}`);\n      } else {\n        debug(`<< ${messageToSend}`);\n      }\n\n      if (socket.readyState === Websocket.OPEN) {\n        socket.send(messageToSend);\n      } else {\n        return onRejectResponse(`Socket closed ${messageId}`);\n      }\n      if (messageType !== CALL_MESSAGE) {\n        resolve();\n      } else {\n        setTimeout(() => onRejectResponse(`Timeout for message ${messageId}`), SOCKET_TIMEOUT);\n      }\n\n      function onResponse (payload) {\n        const response = command.createResponse(payload);\n\n        return resolve(response);\n      }\n      function onRejectResponse(reason) {\n        self.requests[messageId] = () => {};\n        const error = reason instanceof OCPPError ? reason : new Error(reason);\n        reject(error);\n      }\n    });\n  }\n\n  onRequest (request) {\n\n  }\n}\n"]}