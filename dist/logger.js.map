{"version":3,"sources":["../src/logger.js"],"names":["debug","LOGGER_URL","COUNT_MESSAGE_TO_STORE","Logger","sockets","messages","socket","push","console","info","send","command","message","length","slice","sendMessage","messageToSend","readyState","OPEN"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AAGA;;;;;;AAEA,IAAMA,SAAQ,8CAAd;;AAEO,IAAMC,kCAAa,SAAnB;;AAEP,IAAMC,yBAAyB,EAA/B;;IAEqBC,M;AACnB,oBAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;;;;8BAESC,M,EAAQ;AAChB,WAAKF,OAAL,CAAaG,IAAb,CAAkBD,MAAlB;AACAE,cAAQC,IAAR,CAAa,KAAb;AACAH,aAAOI,IAAP,CAAY,yBAAe,EAAEC,SAAS,SAAX,EAAsBN,UAAU,KAAKA,QAArC,EAAf,CAAZ;AACD;;;0BAEKO,O,EAAS;AACb,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,kBAAU,yBAAeA,OAAf,CAAV;AACD;AACD,WAAKP,QAAL,CAAcE,IAAd,CAAmBK,OAAnB;AACA,UAAI,KAAKP,QAAL,CAAcQ,MAAd,GAAuBX,sBAA3B,EAAmD;AACjD,aAAKG,QAAL,GAAgB,KAAKA,QAAL,CAAcS,KAAd,CAAoB,KAAKT,QAAL,CAAcQ,MAAd,GAAuBX,sBAA3C,EAAmE,KAAKG,QAAL,CAAcQ,MAAjF,CAAhB;AACD;;AAEDb,aAAMY,OAAN;AACA,WAAKG,WAAL,CAAiB,EAAEJ,SAAS,SAAX,EAAsBC,gBAAtB,EAAjB;AACD;;;gCAEWI,a,EAAe;AACzB,UAAI,OAAOA,aAAP,KAAyB,QAA7B,EAAuC;AACrCA,wBAAgB,yBAAeA,aAAf,CAAhB;AACD;;AAHwB;AAAA;AAAA;;AAAA;AAKzB,wDAAmB,KAAKZ,OAAxB,4GAAiC;AAAA,cAAxBE,MAAwB;;AAC/B,cAAIA,OAAOW,UAAP,KAAsB,aAAUC,IAApC,EAA0C;AACxCZ,mBAAOI,IAAP,CAAYM,aAAZ;AACD;AACF;AATwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU1B;;;;;kBAnCkBb,M","file":"logger.js","sourcesContent":["import debugFn from 'debug';\r\nimport {\r\n  DEBUG_LIBNAME\r\n} from './constants';\r\nimport Websocket from 'ws';\r\n\r\nconst debug = debugFn(DEBUG_LIBNAME);\r\n\r\nexport const LOGGER_URL = '/logger';\r\n\r\nconst COUNT_MESSAGE_TO_STORE = 10;\r\n\r\nexport default class Logger {\r\n  constructor() {\r\n    this.sockets = [];\r\n    this.messages = [];\r\n  }\r\n\r\n  addSocket(socket) {\r\n    this.sockets.push(socket);\r\n    console.info('add');\r\n    socket.send(JSON.stringify({ command: 'history', messages: this.messages }));\r\n  }\r\n\r\n  debug(message) {\r\n    if (typeof message !== 'string') {\r\n      message = JSON.stringify(message);\r\n    }\r\n    this.messages.push(message);\r\n    if (this.messages.length > COUNT_MESSAGE_TO_STORE) {\r\n      this.messages = this.messages.slice(this.messages.length - COUNT_MESSAGE_TO_STORE, this.messages.length)\r\n    }\r\n\r\n    debug(message);\r\n    this.sendMessage({ command: 'message', message });\r\n  }\r\n\r\n  sendMessage(messageToSend) {\r\n    if (typeof messageToSend !== 'string') {\r\n      messageToSend = JSON.stringify(messageToSend);\r\n    }\r\n\r\n    for (let socket of this.sockets) {\r\n      if (socket.readyState === Websocket.OPEN) {\r\n        socket.send(messageToSend);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}