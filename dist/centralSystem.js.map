{"version":3,"sources":["../src/centralSystem.js"],"names":["debug","CentralSystem","options","clients","logger","port","host","validateConnection","wsOptions","handleProtocols","protocols","req","indexOf","verifyClient","info","cb","url","isAccept","headers","server","Server","on","ws","console","onNewConnection","socket","err","readyState","addSocket","protocol","close","connection","client","onRequest","command","registered","find","r","includes","push","index","splice","onClose"],"mappings":"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","file":"centralSystem.js","sourcesContent":["import WebSocket from 'ws';\nimport debugFn from 'debug';\nimport Logger, { LOGGER_URL } from './logger';\nimport { Connection } from './connection';\nimport {\n  DEBUG_LIBNAME,\n  OCPP_PROTOCOL_1_6\n} from './constants';\nimport CentralSystemClient from './centralSystemClient';\n\nconst debug = debugFn(DEBUG_LIBNAME);\n\nexport default class CentralSystem {\n  constructor(options) {\n    this.options = options || {};\n    this.clients = [];\n    this.logger = new Logger();\n  }\n\n  listen(port = 9220, host = null) {\n    this.port = port;\n\n    const validateConnection = this.options.validateConnection || (() => true);\n\n    const wsOptions = {\n      port,\n      host,\n      handleProtocols: (protocols, req) => {\n        if (protocols.indexOf(OCPP_PROTOCOL_1_6) === -1) {\n          return '';\n        }\n        return OCPP_PROTOCOL_1_6;\n      },\n      verifyClient: async (info, cb) => {\n        if (info.req.url === LOGGER_URL) {\n          debug('Logger connected');\n          return cb(true);\n        }\n        const isAccept = await validateConnection(info.req.url);\n\n        this.logger.debug(`Request for connect \"${info.req.url}\" (${info.req.headers['sec-websocket-protocol']}) - ${isAccept ? 'Valid identifier' : 'Invalid identifier'}`);\n\n        cb(isAccept, 404, 'Central System does not recognize the charge point identifier in the URL path');\n      },\n      ...(this.options.wsOptions || {})\n    };\n\n    this.server = new WebSocket.Server(wsOptions);\n\n    this.server.on('error', (ws, req) => {\n      console.info(ws, req);\n    });\n\n    this.server.on('upgrade', (ws, req) => {\n      console.info(req);\n    });\n    this.server.on('connection', (ws, req) => this.onNewConnection(ws, req));\n\n    debug(`Listen on ${host || 'default host'}:${port}`);\n  }\n\n  onNewConnection(socket, req) {\n    socket.on('error', (err) => {\n      if (socket.readyState !== 2) {\n        console.info(err, socket.readyState);\n      }\n    });\n\n    if (req.url === LOGGER_URL) {\n      this.logger.addSocket(socket);\n      return;\n    }\n\n    if (!socket.protocol) {\n      // From Spec: If the Central System does not agree to using one of the subprotocols offered by the client,\n      // it MUST complete the WebSocket handshake with a response without a Sec-WebSocket-Protocol header and then\n      // immediately close the WebSocket connection.\n      this.logger.debug(`Close connection due to unsupported protocol`);\n      return socket.close();\n    }\n\n    const connection = new Connection(socket, req, this.logger);\n\n    const client = new CentralSystemClient(connection);\n\n    connection.onRequest = (command) => {\n      let registered = this.clients.find(r => r.connection.url.includes(connection.url));\n      if (!registered) {\n        this.clients.push(client);\n      }\n      this.onRequest(client, command);\n    };\n\n    socket.on('close', () => {\n      const index = this.clients.indexOf(client);\n      this.clients.splice(index, 1);\n      this.onClose(client);\n    });\n\n    this.clients.push(client);\n  }\n\n  async onRequest(client, command) {\n    // implementation\n  }\n\n  async onClose(client) {\n    // implementation\n  }\n}\n"]}